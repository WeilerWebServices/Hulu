diff --git a/api.py b/api.py
index ae9d907..3407954 100644
--- a/api.py
+++ b/api.py
@@ -1,5 +1,5 @@
-from flask import Flask, url_for
-from werkzeug.exceptions import NotFound
+from flask import Flask, url_for, request, Response
+from werkzeug.exceptions import NotFound, BadRequest
 app = Flask(__name__)
-from pygit2 import Repository, GIT_OBJ_COMMIT, GIT_OBJ_TREE, GIT_OBJ_BLOB, GIT_REF_SYMBOLIC
+from pygit2 import Repository, GIT_OBJ_COMMIT, GIT_OBJ_TREE, GIT_OBJ_BLOB, GIT_REF_SYMBOLIC, GIT_SORT_TIME
 from datetime import datetime, tzinfo, timedelta
@@ -7,2 +7,13 @@ import json
 from base64 import b64encode
+import functools
+
+def dthandler(obj):
+    if hasattr(obj, 'isoformat'):
+        return obj.isoformat()
+
+def jsonify(f):
+    @functools.wraps(f)
+    def wrapped(*args, **kwargs):
+        return Response(json.dumps(f(*args, **kwargs), default=dthandler), mimetype='application/json')
+    return wrapped
 
@@ -19,3 +30,3 @@ class FixedOffset(tzinfo):
 
-REPO_BASE = '/Users/rajiv/Code/'
+REPO_BASE = '/Users/rajiv/HuluCode/'
 
@@ -28,2 +39,26 @@ def _get_repo(repo_key):
 
+def _get_commit(repo, sha):
+    try:
+        commit = repo[unicode(sha)]
+    except KeyError:
+        raise NotFound("commit not found")
+    if commit.type != GIT_OBJ_COMMIT:
+        raise NotFound("sha not a commit")
+    return commit
+
+def _lookup_ref(repo, ref_name):
+    try:
+        return repo.lookup_reference(ref_name)
+    except:
+        if "/" in ref_name and not ref_name.startswith("refs/"):
+            ref_name = "refs/" + ref_name
+        else:
+            ref_name = "refs/heads/" + ref_name
+
+        try:
+            return repo.lookup_reference(ref_name)
+        except:
+            return None
+
+
 def _convert_signature(sig):
@@ -52,2 +87,4 @@ def _convert_commit(repo_key, commit):
 
+GIT_MODE_SUBMODULE = int('0160000', 8)
+
 def _convert_tree(repo_key, tree):
@@ -55,3 +92,2 @@ def _convert_tree(repo_key, tree):
     for entry in tree:
-        obj = entry.to_object()
         entry_data = {
@@ -60,9 +96,14 @@ def _convert_tree(repo_key, tree):
         }
-        if obj.type == GIT_OBJ_BLOB:
-            entry_data['type'] = "blob"
-            entry_data['size'] = obj.size
-            entry_data['url'] = url_for('get_blob', _external=True, repo_key=repo_key, sha=entry.hex)
-        elif obj.type == GIT_OBJ_TREE:
-            entry_data['type'] = "tree"
-            entry_data['url'] = url_for('get_tree', _external=True, repo_key=repo_key, sha=entry.hex)
+        if entry.filemode == GIT_MODE_SUBMODULE:
+            entry_data['type'] = "submodule"
+        else:
+            obj = entry.to_object()
+            if obj.type == GIT_OBJ_BLOB:
+                entry_data['type'] = "blob"
+                entry_data['size'] = obj.size
+                entry_data['url'] = url_for('get_blob', _external=True, repo_key=repo_key, sha=entry.hex)
+            elif obj.type == GIT_OBJ_TREE:
+                entry_data['type'] = "tree"
+                entry_data['url'] = url_for('get_tree', _external=True, repo_key=repo_key, sha=entry.hex)
+        entry_data['mode'] = oct(entry.filemode)
         entry_list.append(entry_data)
@@ -73,3 +114,2 @@ def _convert_tree(repo_key, tree):
         "tree": entry_list,
-        #"mode": todo,
     }
@@ -115,19 +155,42 @@ def _convert_ref(repo_key, ref, obj):
 
-def dthandler(obj):
-    if hasattr(obj, 'isoformat'):
-        return obj.isoformat()
+@app.route('/repos/<repo_key>/git/commits')
+@jsonify
+def get_commit_list(repo_key):
+    ref_name = request.args.get('ref_name') or None
+    start_sha = request.args.get('start_sha') or None
+    limit = request.args.get('limit') or 50
+    try:
+        limit = int(limit)
+    except:
+        raise BadRequest("invalid limit")
+
+    repo = _get_repo(repo_key)
 
-def _json_dump(obj):
-    return json.dumps(obj, default=dthandler)
+    start_commit_id = None
+    if start_sha is not None:
+        start_commit_id = start_sha
+    else:
+        if ref_name is None:
+            ref_name = "HEAD"
+        ref = _lookup_ref(repo, ref_name)
+        if ref is None:
+            raise NotFound("reference not found")
+        start_commit_id = _lookup_ref(repo, ref_name).resolve().oid
+
+    commits = []
+    walker = repo.walk(start_commit_id, GIT_SORT_TIME)
+    count = 0
+    for commit in walker:
+        count += 1
+        if count > limit:
+            break
+        commits.append(_convert_commit(repo_key, commit))
+    return commits
 
 @app.route('/repos/<repo_key>/git/commits/<sha>')
+@jsonify
 def get_commit(repo_key, sha):
     repo = _get_repo(repo_key)
-    try:
-        commit = repo[unicode(sha)]
-    except KeyError:
-        raise NotFound("commit not found")
-    if commit.type != GIT_OBJ_COMMIT:
-        raise NotFound("sha not a commit")
-    return _json_dump(_convert_commit(repo_key, commit))
+    commit = _get_commit(repo, sha)
+    return _convert_commit(repo_key, commit)
 
@@ -135,2 +198,3 @@ def get_commit(repo_key, sha):
 @app.route('/repos/<repo_key>/git/trees/<sha>')
+@jsonify
 def get_tree(repo_key, sha):
@@ -143,5 +207,6 @@ def get_tree(repo_key, sha):
         raise NotFound("sha not a tree")
-    return _json_dump(_convert_tree(repo_key, tree))
+    return _convert_tree(repo_key, tree)
 
 @app.route('/repos/<repo_key>/git/blobs/<sha>')
+@jsonify
 def get_blob(repo_key, sha):
@@ -154,5 +219,3 @@ def get_blob(repo_key, sha):
         raise NotFound("sha not a blob")
-    return _json_dump(_convert_blob(repo_key, blob))
-
-
+    return _convert_blob(repo_key, blob)
 
@@ -160,2 +223,3 @@ def get_blob(repo_key, sha):
 @app.route('/repos/<repo_key>/git/refs/<path:ref_path>')
+@jsonify
 def get_ref_list(repo_key, ref_path=None):
@@ -171,3 +235,3 @@ def get_ref_list(repo_key, ref_path=None):
         ref_data = ref_data[0]
-    return _json_dump(ref_data)
+    return ref_data
     
