<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TMMemoryCache.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TMMemoryCache</TokenIdentifier>
			<Abstract type="html">TMMemoryCache is a fast, thread safe key/value store similar to NSCache. On iOS it will clear itself
automatically to reduce memory usage when the app receives a memory warning or goes into the background.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setQueue:</TokenIdentifier>
			<Abstract type="html">A concurrent queue on which all work is done. It is exposed here so that it can be set to target some
other queue, such as a global concurrent queue with a priority other than the default.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (readonly) dispatch_queue_t queue</Declaration>
			
			
			<Anchor>//api/name/queue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/queue</TokenIdentifier>
			<Abstract type="html">A concurrent queue on which all work is done. It is exposed here so that it can be set to target some
other queue, such as a global concurrent queue with a priority other than the default.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (readonly) dispatch_queue_t queue</Declaration>
			
			
			<Anchor>//api/name/queue</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setTotalCost:</TokenIdentifier>
			<Abstract type="html">The total accumulated cost.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSUInteger totalCost</Declaration>
			
			
			<Anchor>//api/name/totalCost</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/totalCost</TokenIdentifier>
			<Abstract type="html">The total accumulated cost.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (readonly) NSUInteger totalCost</Declaration>
			
			
			<Anchor>//api/name/totalCost</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setCostLimit:</TokenIdentifier>
			<Abstract type="html">The maximum cost allowed to accumulate before objects begin to be removed (oldest first).</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger costLimit</Declaration>
			
			
			<Anchor>//api/name/costLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/costLimit</TokenIdentifier>
			<Abstract type="html">The maximum cost allowed to accumulate before objects begin to be removed (oldest first).</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSUInteger costLimit</Declaration>
			
			
			<Anchor>//api/name/costLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setAgeLimit:</TokenIdentifier>
			<Abstract type="html">The maximum number of seconds an object is allowed to exist in the cache. Setting this to a value
greater than 0.0 will start a recurring GCD timer with the same period that calls trimToDate:.
Setting it back to 0.0 will stop the timer. Defaults to 0.0.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSTimeInterval ageLimit</Declaration>
			
			
			<Anchor>//api/name/ageLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/ageLimit</TokenIdentifier>
			<Abstract type="html">The maximum number of seconds an object is allowed to exist in the cache. Setting this to a value
greater than 0.0 will start a recurring GCD timer with the same period that calls trimToDate:.
Setting it back to 0.0 will stop the timer. Defaults to 0.0.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (assign) NSTimeInterval ageLimit</Declaration>
			
			
			<Anchor>//api/name/ageLimit</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setWillAddObjectBlock:</TokenIdentifier>
			<Abstract type="html">A block to be executed just before an object is added to the cache. This block will be excuted within
a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock willAddObjectBlock</Declaration>
			
			
			<Anchor>//api/name/willAddObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/willAddObjectBlock</TokenIdentifier>
			<Abstract type="html">A block to be executed just before an object is added to the cache. This block will be excuted within
a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock willAddObjectBlock</Declaration>
			
			
			<Anchor>//api/name/willAddObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setWillRemoveObjectBlock:</TokenIdentifier>
			<Abstract type="html">A block to be executed just before an object is removed from the cache. This block will be excuted
within a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock willRemoveObjectBlock</Declaration>
			
			
			<Anchor>//api/name/willRemoveObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/willRemoveObjectBlock</TokenIdentifier>
			<Abstract type="html">A block to be executed just before an object is removed from the cache. This block will be excuted
within a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock willRemoveObjectBlock</Declaration>
			
			
			<Anchor>//api/name/willRemoveObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setDidAddObjectBlock:</TokenIdentifier>
			<Abstract type="html">A block to be executed just after an object is added to the cache. This block will be excuted within
a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock didAddObjectBlock</Declaration>
			
			
			<Anchor>//api/name/didAddObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/didAddObjectBlock</TokenIdentifier>
			<Abstract type="html">A block to be executed just after an object is added to the cache. This block will be excuted within
a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock didAddObjectBlock</Declaration>
			
			
			<Anchor>//api/name/didAddObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setDidRemoveObjectBlock:</TokenIdentifier>
			<Abstract type="html">A block to be executed just after an object is removed from the cache. This block will be excuted
within a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock didRemoveObjectBlock</Declaration>
			
			
			<Anchor>//api/name/didRemoveObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TMMemoryCache/didRemoveObjectBlock</TokenIdentifier>
			<Abstract type="html">A block to be executed just after an object is removed from the cache. This block will be excuted
within a barrier, i.e. all reads and writes are suspended for the duration of the block.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>@property (copy) TMMemoryCacheObjectBlock didRemoveObjectBlock</Declaration>
			
			
			<Anchor>//api/name/didRemoveObjectBlock</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/sharedCache</TokenIdentifier>
			<Abstract type="html">A shared cache.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (instancetype)sharedCache</Declaration>
			
			<ReturnValue><Abstract type="html">The shared singleton cache instance.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedCache</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/objectForKey:block:</TokenIdentifier>
			<Abstract type="html">Retrieves the object for the specified key. This method returns immediately and executes the passed
block after the object is available, potentially in parallel with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)objectForKey:(NSString *)key block:(TMMemoryCacheObjectBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key associated with the requested object.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently when the object is available.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/objectForKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setObject:forKey:block:</TokenIdentifier>
			<Abstract type="html">Stores an object in the cache for the specified key. This method returns immediately and executes the
passed block after the object has been stored, potentially in parallel with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)setObject:(id)object forKey:(NSString *)key block:(TMMemoryCacheObjectBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to store in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A key to associate with the object. This string will be copied.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the object has been stored, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setObject:forKey:withCost:block:</TokenIdentifier>
			<Abstract type="html">Stores an object in the cache for the specified key and the specified cost. If the cost causes the total
to go over the costLimit the cache is trimmed (oldest objects first). This method returns immediately
and executes the passed block after the object has been stored, potentially in parallel with other blocks
on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)setObject:(id)object forKey:(NSString *)key withCost:(NSUInteger)cost block:(TMMemoryCacheObjectBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to store in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A key to associate with the object. This string will be copied.</Abstract>
				</Parameter><Parameter>
					<Name>cost</Name>
					<Abstract type="html">An amount to add to the totalCost.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the object has been stored, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:withCost:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/removeObjectForKey:block:</TokenIdentifier>
			<Abstract type="html">Removes the object for the specified key. This method returns immediately and executes the passed
block after the object has been removed, potentially in parallel with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeObjectForKey:(NSString *)key block:(TMMemoryCacheObjectBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key associated with the object to be removed.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the object has been removed, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObjectForKey:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/trimToDate:block:</TokenIdentifier>
			<Abstract type="html">Removes all objects from the cache older than the specified date, as ordered by access time. This
method returns immediately and executes the passed block after the cache has been trimmed, potentially
in parallel with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimToDate:(NSDate *)date block:(TMMemoryCacheBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Objects that haven&apos;t been accessed since this date are removed from the cache.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the cache has been trimmed, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimToDate:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/trimToCost:block:</TokenIdentifier>
			<Abstract type="html">Removes objects from the cache (oldest objects first) until the totalCost is below the specified
value. This method returns immediately and executes the passed block after the cache has been trimmed,
potentially in parallel with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimToCost:(NSUInteger)cost block:(TMMemoryCacheBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>cost</Name>
					<Abstract type="html">The total accumulation allowed to remain after the cache has been trimmed.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the cache has been trimmed, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimToCost:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/removeAllObjects:</TokenIdentifier>
			<Abstract type="html">Removes all objects from the cache without calling the associated event blocks. This method returns
immediately and executes the passed block after the cache has been cleared, potentially in parallel
with other blocks on the queue.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeAllObjects:(TMMemoryCacheBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract type="html">A block to be executed concurrently after the cache has been cleared, or nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeAllObjects:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/objectForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the object for the specified key. This method blocks the calling thread until the
object is available.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/objectForKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)objectForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key associated with the object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The object for the specified key.</Abstract></ReturnValue>
			<Anchor>//api/name/objectForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setObject:forKey:</TokenIdentifier>
			<Abstract type="html">Stores an object in the cache for the specified key. This method blocks the calling thread until the object
has been set.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setObject:forKey:block:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setObject:(id)object forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to store in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A key to associate with the object. This string will be copied.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/setObject:forKey:withCost:</TokenIdentifier>
			<Abstract type="html">Stores an object in the cache for the specified key and the specified cost. If the cost causes the total
to go over the costLimit the cache is trimmed (oldest objects first). This method blocks the calling thread
until the object has been stored.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)setObject:(id)object forKey:(NSString *)key withCost:(NSUInteger)cost</Declaration>
			<Parameters>
				<Parameter>
					<Name>object</Name>
					<Abstract type="html">An object to store in the cache.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A key to associate with the object. This string will be copied.</Abstract>
				</Parameter><Parameter>
					<Name>cost</Name>
					<Abstract type="html">An amount to add to the totalCost.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setObject:forKey:withCost:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/removeObjectForKey:</TokenIdentifier>
			<Abstract type="html">Removes the object for the specified key. This method blocks the calling thread until the object
has been removed.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeObjectForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">The key associated with the object to be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObjectForKey:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/trimToDate:</TokenIdentifier>
			<Abstract type="html">Removes all objects from the cache older than the specified date, as ordered by access time. This
method blocks the calling thread until the cache has been trimmed.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimToDate:(NSDate *)date</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">Objects that haven&apos;t been accessed since this date are removed from the cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimToDate:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/trimToCost:</TokenIdentifier>
			<Abstract type="html">Removes objects from the cache (oldest objects first) until the totalCost is below the specified
value. This method blocks the calling thread until the cache has been trimmed.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)trimToCost:(NSUInteger)cost</Declaration>
			<Parameters>
				<Parameter>
					<Name>cost</Name>
					<Abstract type="html">The total accumulation allowed to remain after the cache has been trimmed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/trimToCost:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TMMemoryCache/removeAllObjects</TokenIdentifier>
			<Abstract type="html">Removes all objects from the cache without calling the associated event blocks. This method blocks
the calling thread until the cache has been cleared.</Abstract>
			<DeclaredIn>TMMemoryCache.h</DeclaredIn>			
			
			<Declaration>- (void)removeAllObjects</Declaration>
			
			
			<Anchor>//api/name/removeAllObjects</Anchor>
		</Token>
		
	</File>
</Tokens>